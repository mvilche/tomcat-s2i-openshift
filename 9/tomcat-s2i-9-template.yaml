    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: tomcat-s2i-mvilche
    labels:
      template: wildlfy-s2i-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "tomcat-s2i-mvilche"
      iconClass: "icon-tomcat"
      description: >-
        tomcat s2i images + openjdk + Maven + jolokia
      openshift.io/provider-display-name: "Martin Fabrizzio Vilche"
      openshift.io/documentation-url: "https://github.com/mvilche/tomcat-s2i.git"
      openshift.io/support-url: "https://github.com/mvilche/tomcat-s2i.git"
  message: >-
    Eliga la version de tomcat y Openjdk que desea utilizar
    La conexion a la base de datos podra ser realizada en el context.xml disponible en los configmaps

  objects:

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
        spec:
          containers:
            - image: "${APP_NAME}:latest"
              env:
                - name: TIMEZONE
                  value: America/Montevideo
                - name: CUSTOM_JAVA_OPTS
                  value:             
              imagePullPolicy: Always
              name: ${APP_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
                  name: http
                - containerPort: 8778
                  protocolo: TCP
                  name: jolokia
                - containerPort: 8443
                  protocolo: TCP
                  name: https                  
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 30
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /health
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 30
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /health
                timeoutSeconds: 15
              resources:
                requests:
                  cpu: 256m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/tomcat/conf/server.xml
                  subPath: server.xml
                  name: configmap-1
                - mountPath: /opt/tomcat/conf/context.xml
                  subPath: context.xml
                  name: configmap-2
                - mountPath: /opt/tomcat/conf/logging.properties
                  subPath: logging.properties
                  name: configmap-3                                     
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                items:
                  - key: server.xml
                    path: server.xml
                name: tomcat${TOMCAT_VERSION}-${APP_NAME}
              name: configmap-1
            - configMap:
                items:
                  - key: context.xml
                    path: context.xml
                name: tomcat${TOMCAT_VERSION}-${APP_NAME}
              name: configmap-2
            - configMap:
                items:
                  - key: logging.properties
                    path: logging.properties
                name: tomcat${TOMCAT_VERSION}-${APP_NAME}
              name: configmap-3                            
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}
            from:
              kind: ImageStreamTag
              name: "${APP_NAME}:latest"
          type: ImageChange

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-s2i
    spec:
      completionDeadlineSeconds: 1800
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-s2i:latest
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        git:
          uri: ${REPO_GIT}
          ref: ${BRANCH_GIT}
        type: Git
      strategy:
        sourceStrategy:
          incremental: true
          forcePull: true
          env:
            - name: NEXUS_MIRROR_URL
              value: ${NEXUS_MIRROR_URL}
            - name: MKDOCS_DIR
              value: ${MKDOCS_DIR}
            - name: MKDOCS_CONTEXT_PATH
              value: ${MKDOCS_CONTEXT_PATH}
          from:
            kind: ImageStreamTag
            name: tomcat-${TOMCAT_VERSION}-s2i:${TOMCAT_VERSION}-jdk${VERSION_JDK}-alpine
        type: Source
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange
        - imageChange:
            from:
              kind: "ImageStreamTag"
              name: "tomcat-${TOMCAT_VERSION}-s2i:latest"

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-runtime
    spec:
      completionDeadlineSeconds: 1800
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      source:
        type: Dockerfile
        dockerfile: |-
                FROM tomcat-${TOMCAT_VERSION}-runtime:latest
                COPY webapps /opt/tomcat/webapps
                USER root
                RUN chown 1001:0 -R /opt/tomcat/webapps && chmod -R g=u /opt/tomcat
                USER 1001:0
        images:
        - from:
            kind: ImageStreamTag
            name: ${APP_NAME}-s2i:latest
          paths:
          - sourcePath: /opt/tomcat/webapps
            destinationDir: "."
      strategy:
        dockerStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: tomcat-${TOMCAT_VERSION}-runtime:${TOMCAT_VERSION}-jre${VERSION_JDK}-alpine
        type: Docker
      triggers:
      - type: "imageChange"
        imageChange:
          from:
            kind: "ImageStreamTag"
            name: "${APP_NAME}-s2i:latest"



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: jolokia
          port: 8778
          protocol: TCP
          targetPort: 8778
        - name: ajp
          port: 8009
          protocol: TCP
          targetPort: 8009
        - name: https
          port: 8443
          protocol: TCP
          targetPort: 8443          
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP


  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-http
    spec:
      port:
        targetPort: http
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec: {}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-s2i
    spec: {}


######
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
      name: tomcat-${TOMCAT_VERSION}-s2i
    spec:
      tags:
      - from:
          kind: DockerImage
          name: mvilche/tomcat-s2i:${TOMCAT_VERSION}-jdk${VERSION_JDK}-alpine
        name: ${TOMCAT_VERSION}-jdk${VERSION_JDK}-alpine

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
      name: tomcat-${TOMCAT_VERSION}-runtime
    spec:
      tags:
      - from:
          kind: DockerImage
          name: mvilche/tomcat-s2i:${TOMCAT_VERSION}-jre${VERSION_JDK}-alpine
        name: ${TOMCAT_VERSION}-jre${VERSION_JDK}-alpine




  - apiVersion: v1
    data:
      server.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <!--
          Licensed to the Apache Software Foundation (ASF) under one or more
          contributor license agreements.  See the NOTICE file distributed with
          this work for additional information regarding copyright ownership.
          The ASF licenses this file to You under the Apache License, Version 2.0
          (the "License"); you may not use this file except in compliance with
          the License.  You may obtain a copy of the License at

              http://www.apache.org/licenses/LICENSE-2.0

          Unless required by applicable law or agreed to in writing, software
          distributed under the License is distributed on an "AS IS" BASIS,
          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          See the License for the specific language governing permissions and
          limitations under the License.
        -->
        <!-- Note:  A "Server" is not itself a "Container", so you may not
            define subcomponents such as "Valves" at this level.
            Documentation at /docs/config/server.html
        -->
        <Server port="8005" shutdown="SHUTDOWN">
          <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
          <!-- Security listener. Documentation at /docs/config/listeners.html
          <Listener className="org.apache.catalina.security.SecurityListener" />
          -->
          <!--APR library loader. Documentation at /docs/apr.html -->
          <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
          <!-- Prevent memory leaks due to use of particular java/javax APIs-->
          <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
          <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
          <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

          <!-- Global JNDI resources
              Documentation at /docs/jndi-resources-howto.html
          -->
          <GlobalNamingResources>
            <!-- Editable user database that can also be used by
                UserDatabaseRealm to authenticate users
            -->
            <Resource name="UserDatabase" auth="Container"
                      type="org.apache.catalina.UserDatabase"
                      description="User database that can be updated and saved"
                      factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                      pathname="conf/tomcat-users.xml" />
          </GlobalNamingResources>

          <!-- A "Service" is a collection of one or more "Connectors" that share
              a single "Container" Note:  A "Service" is not itself a "Container",
              so you may not define subcomponents such as "Valves" at this level.
              Documentation at /docs/config/service.html
          -->
          <Service name="Catalina">

            <!--The connectors can use a shared executor, you can define one or more named thread pools-->
            <!--
            <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
                maxThreads="150" minSpareThreads="4"/>
            -->


            <!-- A "Connector" represents an endpoint by which requests are received
                and responses are returned. Documentation at :
                Java HTTP Connector: /docs/config/http.html
                Java AJP  Connector: /docs/config/ajp.html
                APR (HTTP/AJP) Connector: /docs/apr.html
                Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
            -->
            <Connector port="8080" protocol="HTTP/1.1"
                      connectionTimeout="20000"
                      redirectPort="8443" />
            <!-- A "Connector" using the shared thread pool-->
            <!--
            <Connector executor="tomcatThreadPool"
                      port="8080" protocol="HTTP/1.1"
                      connectionTimeout="20000"
                      redirectPort="8443" />
            -->
            <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443
                This connector uses the NIO implementation. The default
                SSLImplementation will depend on the presence of the APR/native
                library and the useOpenSSL attribute of the
                AprLifecycleListener.
                Either JSSE or OpenSSL style configuration may be used regardless of
                the SSLImplementation selected. JSSE style configuration is used below.
            -->
            <!--
            <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                      maxThreads="150" SSLEnabled="true">
                <SSLHostConfig>
                    <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                                type="RSA" />
                </SSLHostConfig>
            </Connector>
            -->
            <!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
                This connector uses the APR/native implementation which always uses
                OpenSSL for TLS.
                Either JSSE or OpenSSL style configuration may be used. OpenSSL style
                configuration is used below.
            -->
            <!--
            <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                      maxThreads="150" SSLEnabled="true" >
                <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
                <SSLHostConfig>
                    <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                                certificateFile="conf/localhost-rsa-cert.pem"
                                certificateChainFile="conf/localhost-rsa-chain.pem"
                                type="RSA" />
                </SSLHostConfig>
            </Connector>
            -->

            <!-- Define an AJP 1.3 Connector on port 8009 -->
            <!--
            <Connector protocol="AJP/1.3"
                      address="::1"
                      port="8009"
                      redirectPort="8443" />
            -->

            <!-- An Engine represents the entry point (within Catalina) that processes
                every request.  The Engine implementation for Tomcat stand alone
                analyzes the HTTP headers included with the request, and passes them
                on to the appropriate Host (virtual host).
                Documentation at /docs/config/engine.html -->

            <!-- You should set jvmRoute to support load-balancing via AJP ie :
            <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
            -->
            <Engine name="Catalina" defaultHost="localhost">

              <!--For clustering, please take a look at documentation at:
                  /docs/cluster-howto.html  (simple how to)
                  /docs/config/cluster.html (reference documentation) -->
              <!--
              <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
              -->

              <!-- Use the LockOutRealm to prevent attempts to guess user passwords
                  via a brute-force attack -->
              <Realm className="org.apache.catalina.realm.LockOutRealm">
                <!-- This Realm uses the UserDatabase configured in the global JNDI
                    resources under the key "UserDatabase".  Any edits
                    that are performed against this UserDatabase are immediately
                    available for use by the Realm.  -->
                <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                      resourceName="UserDatabase"/>
              </Realm>

              <Host name="localhost"  appBase="webapps"
                    unpackWARs="true" autoDeploy="true">

                <!-- SingleSignOn valve, share authentication between web applications
                    Documentation at: /docs/config/valve.html -->
                <!--
                <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
                -->

                <!-- Access log processes all example.
                    Documentation at: /docs/config/valve.html
                    Note: The pattern used is equivalent to using pattern="common" -->
                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                      prefix="localhost_access_log" suffix=".txt"
                      pattern="%h %l %u %t &quot;%r&quot; %s %b" />

              </Host>
            </Engine>
          </Service>
        </Server>
      context.xml: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <!--
          Licensed to the Apache Software Foundation (ASF) under one or more
          contributor license agreements.  See the NOTICE file distributed with
          this work for additional information regarding copyright ownership.
          The ASF licenses this file to You under the Apache License, Version 2.0
          (the "License"); you may not use this file except in compliance with
          the License.  You may obtain a copy of the License at

              http://www.apache.org/licenses/LICENSE-2.0

          Unless required by applicable law or agreed to in writing, software
          distributed under the License is distributed on an "AS IS" BASIS,
          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          See the License for the specific language governing permissions and
          limitations under the License.
        -->
        <!-- The contents of this file will be loaded for each web application -->
        <Context>

            <!-- Default set of monitored resources. If one of these changes, the    -->
            <!-- web application will be reloaded.                                   -->
            <WatchedResource>WEB-INF/web.xml</WatchedResource>
            <WatchedResource>WEB-INF/tomcat-web.xml</WatchedResource>
            <WatchedResource>${catalina.base}/conf/web.xml</WatchedResource>

            <!-- Uncomment this to disable session persistence across Tomcat restarts -->
            <!--
            <Manager pathname="" />
            -->
        </Context>
      logging.properties: |-
        # Licensed to the Apache Software Foundation (ASF) under one or more
        # contributor license agreements.  See the NOTICE file distributed with
        # this work for additional information regarding copyright ownership.
        # The ASF licenses this file to You under the Apache License, Version 2.0
        # (the "License"); you may not use this file except in compliance with
        # the License.  You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.

        handlers = 1catalina.org.apache.juli.AsyncFileHandler, 2localhost.org.apache.juli.AsyncFileHandler, 3manager.org.apache.juli.AsyncFileHandler, 4host-manager.org.apache.juli.AsyncFileHandler, java.util.logging.ConsoleHandler

        .handlers = 1catalina.org.apache.juli.AsyncFileHandler, java.util.logging.ConsoleHandler

        ############################################################
        # Handler specific properties.
        # Describes specific configuration info for Handlers.
        ############################################################

        1catalina.org.apache.juli.AsyncFileHandler.level = FINE
        1catalina.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
        1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.
        1catalina.org.apache.juli.AsyncFileHandler.maxDays = 90
        1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8

        2localhost.org.apache.juli.AsyncFileHandler.level = FINE
        2localhost.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
        2localhost.org.apache.juli.AsyncFileHandler.prefix = localhost.
        2localhost.org.apache.juli.AsyncFileHandler.maxDays = 90
        2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8

        3manager.org.apache.juli.AsyncFileHandler.level = FINE
        3manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
        3manager.org.apache.juli.AsyncFileHandler.prefix = manager.
        3manager.org.apache.juli.AsyncFileHandler.maxDays = 90
        3manager.org.apache.juli.AsyncFileHandler.encoding = UTF-8

        4host-manager.org.apache.juli.AsyncFileHandler.level = FINE
        4host-manager.org.apache.juli.AsyncFileHandler.directory = ${catalina.base}/logs
        4host-manager.org.apache.juli.AsyncFileHandler.prefix = host-manager.
        4host-manager.org.apache.juli.AsyncFileHandler.maxDays = 90
        4host-manager.org.apache.juli.AsyncFileHandler.encoding = UTF-8

        java.util.logging.ConsoleHandler.level = FINE
        java.util.logging.ConsoleHandler.formatter = org.apache.juli.OneLineFormatter
        java.util.logging.ConsoleHandler.encoding = UTF-8


        ############################################################
        # Facility specific properties.
        # Provides extra control for each logger.
        ############################################################

        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.AsyncFileHandler

        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO
        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = 3manager.org.apache.juli.AsyncFileHandler

        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].level = INFO
        org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].handlers = 4host-manager.org.apache.juli.AsyncFileHandler

        # For example, set the org.apache.catalina.util.LifecycleBase logger to log
        # each component that extends LifecycleBase changing state:
        #org.apache.catalina.util.LifecycleBase.level = FINE

        # To see debug messages in TldLocationsCache, uncomment the following line:
        #org.apache.jasper.compiler.TldLocationsCache.level = FINE

        # To see debug messages for HTTP/2 handling, uncomment the following line:
        #org.apache.coyote.http2.level = FINE

        # To see debug messages for WebSocket handling, uncomment the following line:
        #org.apache.tomcat.websocket.level = FINE
    kind: ConfigMap
    metadata:
      name: tomcat${TOMCAT_VERSION}-${APP_NAME}

######


  parameters:
    - name: APP_NAME
      displayName: Nombre del microservicio
      value: ''
      required: true
    - name: TOMCAT_VERSION
      displayName: Versión de tomcat a utilizar
      value: '9'
      required: true
    - name: VERSION_JDK
      displayName: Versión de OPENJDK
      value: '11'
      required: true
    - name: REPO_GIT
      displayName: Repositorio git donde se encuentra la aplicacion
      value: ""
      required: true
    - name: BRANCH_GIT
      displayName: Nombre del branch del repositorio
      value: ""
      required: true
    - name: NEXUS_MIRROR_URL
      displayName: Especifique repositorio nexus para la descarga de las dependencias. Recomendado
      value: ""
    - name: MKDOCS_DIR
      displayName: Directorio donde se encuentra el fichero mkdocs.yml
      value: ""
    - name: MKDOCS_CONTEXT_PATH
      displayName: context path donde se desplegara la documentación. Por defecto es /
      value: ""